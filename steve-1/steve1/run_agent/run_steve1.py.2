import io
import os
import sys
import time
import mmap
import threading

import torch
import numpy as np

import struct
import argparse

import cv2

from Xlib import X, display, error
from Xlib.ext import xfixes
from Xlib.ext.xtest import fake_input
from Xlib.XK import string_to_keysym
from Xlib.Xatom import WM_NAME

from steve1.config import PRIOR_INFO, DEVICE
from steve1.utils.mineclip_agent_env_utils import make_agent, load_mineclip_wconfig
from steve1.data.text_alignment.vae import load_vae_model
from steve1.utils.embed_utils import get_prior_embed

from detect_minecraft_menu import detect_letters


from steve1.VPT.agent import MineRLAgent, resize_image, AGENT_RESOLUTION, validate_env, \
     default_device_type, set_default_torch_device, CameraHierarchicalMapping, \
     ActionTransformer, ACTION_TRANSFORMER_KWARGS, POLICY_KWARGS, PI_HEAD_KWARGS
from steve1.embed_conditioned_policy import MinecraftAgentPolicy



POLL_INTERVAL_PROMPT = 0.1
POLL_INTERVAL_FRAME = 0.001
WIDTH = 640
HEIGHT = 360
FRAMETYPE_GAMEPLAY = 0
FRAMETYPE_GAMEMENU = 1
HEADER_SIZE = 4 + 4
FRAME_SIZE = WIDTH * HEIGHT * 4
CONTROL_SIZE = 4 + 4
PROMPT_SIZE = 80
SHMBUF_FRAME_SIZE = HEADER_SIZE + FRAME_SIZE
SHMBUF_FRAME_PATH = "/dev/shm/minecraft_frame"
SHMBUF_CONTROL_SIZE = HEADER_SIZE + CONTROL_SIZE
SHMBUF_CONTROL_PATH = "/dev/shm/minecraft_control"
SHMBUF_PROMPT_SIZE = HEADER_SIZE + PROMPT_SIZE
SHMBUF_PROMPT_PATH = "/dev/shm/minecraft_prompt"

DEFAULT_PROMPT = 'mine and craft'

# scaler to convert from pixel delta to angle delta
# taken from Video Pre-Training's run_inverse_dynamics_model.py
CAMERA_SCALER = 360.0 / 2400.0
EXTRA_FACTOR = 1.0

def get_action(frame, ctx):
    ctx['obs']['pov'] = frame
    agent = ctx['agent']
    with torch.cuda.amp.autocast():
        #action = agent.get_action(ctx['obs'], ctx['prompt_embed'])

        menerl_obs = ctx['obs']
        goal_embed = ctx['prompt_embed']
        #agent_input = self._env_obs_to_agent(minerl_obs, goal_embed)
        #############################################################
        #if device is None:
        #    device = self.device
        device = DEVICE

        #agent_input = resize_image(minerl_obs["pov"], AGENT_RESOLUTION)[None]
        agent_input = resize_image(frame, AGENT_RESOLUTION)[None]
        agent_input = {"img": th.from_numpy(agent_input).to(device)}

        # MODIFIED
        #agent_input['mineclip_embed'] = th.from_numpy(goal_embed).to(device)
        agent_input['mineclip_embed'] = th.from_numpy(ctx['prompt_embed']).to(device)

        #return agent_input
        ############################################################

        agent_action, self.hidden_state, result = self.policy.act(
            agent_input, self._dummy_first, self.hidden_state,
            stochastic=True, cond_scale=self.cond_scale
        )


        #minerl_action, minerl_action0 = self._agent_action_to_env(agent_action)
        action = agent_action
        if isinstance(action["buttons"], th.Tensor):
            action = {
                "buttons": agent_action["buttons"].cpu().numpy(),
                "camera": agent_action["camera"].cpu().numpy()
            }
        minerl_action = self.action_mapper.to_factored(action)
        minerl_action0 = self.action_transformer.policy2env(minerl_action)

        return minerl_action minerl_action0

def in_play(frame, ctx):
    if detect_letters(frame) == (0, 0):
        return True
    else:
        return False

def is_key_pressed(keycode, ctx):
    dpy = ctx['dpy']
    keymap = dpy.query_keymap()
    return 1 if (keymap[keycode // 8] & (1 << (keycode % 8))) != 0 else 0

def is_button_pressed(num, ctx):
    root = ctx['root']
    pointer = root.query_pointer()
    masks = { 1 : X.Button1Mask, 3 : X.Button3Mask } 
    return 1 if pointer.mask & masks[num] != 0 else 0
    
def angle2pixel(x, agent):
    bin_ix = agent.action_transformer.discretize_camera(x)
    v_decode = agent.action_transformer.undiscretize_camera(bin_ix)
    v_decode = v_decode / CAMERA_SCALER
    return int(v_decode)

def binIx2pixel(x, agent):
    v_decode = agent.action_transformer.undiscretize_camera(x)
    v_decode = v_decode / CAMERA_SCALER
    return int(v_decode)

def focus_window(ctx):
    dpy = ctx['dpy']
    window = ctx['window']
    window.configure(stack_mode=X.Above)
    window.set_input_focus(X.RevertToParent, X.CurrentTime)
    dpy.sync()

def state_to_button(name, num, action, ctx):
    dpy = ctx['dpy']
    if action.get(name, 0) == 1:
        if not is_button_pressed(num, ctx):
            fake_input(dpy, X.ButtonPress, num)
    else:
        if is_button_pressed(num, ctx):
            fake_input(dpy, X.ButtonRelease, num)

def state_to_key(name, keystring, action, ctx):
    dpy = ctx['dpy']
    keysym = string_to_keysym(keystring)
    keycode = dpy.keysym_to_keycode(keysym)
    if action.get(name, 0) == 1:
        if not is_key_pressed(keycode, ctx):
            #print('state_to_key:', name, 'press')
            fake_input(dpy, X.KeyPress, keycode)
    else:
        if is_key_pressed(keycode, ctx):
            #print('state_to_key:', name, 'release')
            fake_input(dpy, X.KeyRelease, keycode)

def change_to_key(name, keystring, curr, recent, action, ctx):
    change = False
    dpy = ctx['dpy']
    keysym = string_to_keysym(keystring)
    keycode = dpy.keysym_to_keycode(keysym)
    # Keep track of the most recent action
    recent_action = ctx.get(name, 0)
    curr_action = action.get(name, 0)
    if curr_action == curr and recent_action == recent:
        #print('change_to_key:', name, curr, recent)
        fake_input(dpy, X.KeyPress, keycode)
        fake_input(dpy, X.KeyRelease, keycode)
        change = True
    # Don't forget to update the recent for the next frame
    ctx[name] = curr_action
    return change

def move_mouse(action, ctx):
    pitch_delta, yaw_delta = action.get("camera", [0, 0])[0]
    agent = ctx['agent']
    dpy = ctx['dpy']
    root = ctx['root']
    pointer = root.query_pointer()
    
    width = ctx['width']
    height = ctx['height']
    x = ctx['x']
    y = ctx['y']

    dx = angle2pixel(yaw_delta, agent)
    dy = angle2pixel(pitch_delta, agent)
    if (dx, dy) != (0.0, 0.0):
        #print('dx, dy:', dx, dy)
        left = x
        right = x + width
        top = y
        bottom = y + height
    
        new_pointer_x = int(np.clip(pointer.root_x + dx, left+1, right-1))
        new_pointer_y = int(np.clip(pointer.root_y + dy, top+1, bottom-1))
        #if pointer.mask & X.Button1Mask != 0:
        fake_input(dpy, X.MotionNotify, x=new_pointer_x, y=new_pointer_y)
        #else:
        #root.warp_pointer(new_pointer_x, new_pointer_y)
'''
def process_frame(frame, controltype, ctx):
    #print('process_frame()')
    action = ctx['action']

    focus_window(ctx)

    change_to_key("inventory", "e", 1, 0, action, ctx)
    change_to_key("hotbar.1", "1", 1, 0, action, ctx)
    change_to_key("hotbar.2", "2", 1, 0, action, ctx)
    change_to_key("hotbar.3", "3", 1, 0, action, ctx)
    change_to_key("hotbar.4", "4", 1, 0, action, ctx)
    change_to_key("hotbar.5", "5", 1, 0, action, ctx)
    change_to_key("hotbar.6", "6", 1, 0, action, ctx)
    change_to_key("hotbar.7", "7", 1, 0, action, ctx)
    change_to_key("hotbar.8", "8", 1, 0, action, ctx)
    change_to_key("hotbar.9", "9", 1, 0, action, ctx)

    if controltype == CONTROLTYPE_NONE:
        state_to_key("sprint", "Control_L", action, ctx)
        state_to_key("sneak", "Shift_L", action, ctx)
        state_to_key("drop", "q", action, ctx)
        state_to_button("attack", 1, action, ctx)
        state_to_button("use", 3, action, ctx)

        if ctx['frametype'] == FRAMETYPE_GAMEPLAY:
            state_to_key("forward", "w", action, ctx)
            state_to_key("back", "s", action, ctx)
            state_to_key("left", "a", action, ctx)
            state_to_key("right", "d", action, ctx)
            state_to_key("jump", "space", action, ctx)

    if ctx['frametype'] == FRAMETYPE_GAMEMENU:
        move_mouse(action, ctx)

    ctx['dpy'].sync()
'''    
def init_simulator(in_model, in_weights, prior_info, cond_scale):
    print('====init_simulator====')
    agent = make_agent(in_model, in_weights, cond_scale=cond_scale)
    mineclip = load_mineclip_wconfig()
    prior = load_vae_model(prior_info)
    print('====init_simulator DONE====')
    return agent, mineclip, prior

def process_prompt(ctx):
    shmbuf_prompt = ctx['shmbuf_prompt']

    promptcounter = 0

    while True:
        time.sleep(POLL_INTERVAL_PROMPT)

        shmbuf_prompt.seek(0)
        header0 = struct.unpack("<I", shmbuf_prompt.read(4))[0]

        if header0 == promptcounter:
            continue
        elif header0 > promptcounter + 1:
            print('header0:', header0, 'promptcounter:', promptcounter)

        promptcounter = header0
        
        shmbuf_prompt.seek(4)
        header4 = struct.unpack("<I", shmbuf_prompt.read(4))[0]
        promptlen = header4
    
        shmbuf_prompt.seek(HEADER_SIZE)
        raw_bytes = shmbuf_prompt.read(promptlen)
        prompt_str = raw_bytes.rstrip(b'\x00').decode('utf-8')

        ctx["prompt_embed"] = get_prior_embed(prompt_str, ctx["mineclip"], ctx["prior"], DEVICE)
        ctx["prompt"] = prompt_str

        print(f"prompt:|{ctx['prompt']}|")


def init_prompt(ctx):
    print('====init_prompt====')
    
    with open(SHMBUF_PROMPT_PATH, "w+b") as f:
        f.truncate(SHMBUF_PROMPT_SIZE)
        shmbuf_prompt = mmap.mmap(f.fileno(), SHMBUF_PROMPT_SIZE, access=mmap.ACCESS_READ)

    ctx['shmbuf_prompt'] = shmbuf_prompt

    prompt_thread = threading.Thread(target=lambda : process_prompt(ctx))
    prompt_thread.daemon = True

    ctx['prompt'] = DEFAULT_PROMPT
    ctx["prompt_embed"] = get_prior_embed(DEFAULT_PROMPT, ctx["mineclip"], ctx["prior"], DEVICE)
    
    prompt_thread.start()
    
    print('====init_prompt DONE====')
    return prompt_thread

def process_frame_control(ctx):
    shmbuf_frame = ctx['shmbuf_frame']
    shmbuf_control = ctx['shmbuf_control']
    
    framecounter = 0

    while True:
        time.sleep(POLL_INTERVAL_FRAME)
        t1 = time.time()

            
        shmbuf_frame.seek(0)
        header0 = struct.unpack(">I", shmbuf_frame.read(4))[0]
        if header0 == framecounter:
            continue
        elif header0 > framecounter + 1:
            print('header0:', header0, 'framecounter:', framecounter)

        framecounter = header0
        shmbuf_frame.seek(4)
        header4 = struct.unpack(">I", shmbuf_frame.read(4))[0]
        frametype = header4
        
        ctx['framecounter'] = framecounter
        ctx['frametype'] = frametype

        shmbuf_frame.seek(HEADER_SIZE)
        frame_rgba = np.frombuffer(shmbuf_frame.read(FRAME_SIZE), dtype=np.uint8)

        frame_rgb = frame_rgba.reshape((HEIGHT, WIDTH, 4))[:,:,:3]
        frame_rgb_flip = frame_rgb[::-1,:,:]
        frame_bgr_flip = frame_rgb_flip[:,:,::-1]

        action, action0 = get_action(frame_rgb_flip, ctx)
        ctx['action'] = action
        ctx['action0'] = action0
        
        butval = action0['buttons'][0]
        camval = action0['camera'][0]
        
        button_control = 0
        for bit in butval:
            button_control = (button_control << 1) | bit
        camera_control = camval[0] * 11 + camval[1]
        
        shmbuf_control.seek(HEADER_SIZE)
        shmbuf_control.write(struct.pack(">II", button_control, camera_control))
        shmbuf_control.seek(4)
        shmbuf_control.write(struct.pack(">I", frametype))
        shmbuf_control.flush()

        shmbuf_control.seek(0)
        shmbuf_control.write(struct.pack(">I", framecounter))
        shmbuf_control.flush()
        
        t2 = time.time()
        filename = f"{framecounter:06d} {frametype} {butval}{camval} {ctx['prompt']} {t2-t1:0.3f}"
        print(filename)
        #cv2.imwrite(f"/tmp/{filename}.png", frame_bgr_flip)

def init_frame_control(ctx):
    print('====init_frame_control====')

    with open(SHMBUF_FRAME_PATH, 'w+b') as f:
        f.truncate(SHMBUF_FRAME_SIZE)
        shmbuf_frame = mmap.mmap(f.fileno(), SHMBUF_FRAME_SIZE, access=mmap.ACCESS_READ)

    with open(SHMBUF_CONTROL_PATH, 'w+b') as f:
        f.truncate(SHMBUF_CONTROL_SIZE)
        shmbuf_control = mmap.mmap(f.fileno(), SHMBUF_CONTROL_SIZE, access=mmap.ACCESS_WRITE)
    
    ctx['shmbuf_frame'] = shmbuf_frame
    ctx['shmbuf_control'] = shmbuf_control

    frame_control_thread = threading.Thread(target=lambda : process_frame_control(ctx))
    frame_control_thread.daemon = True

    frame_control_thread.start()

    print('====init_frame_control DONE====')
    return frame_control_thread

def dumpBinIx2Pixels(agent):
    print('-----------------------------')
    for ix in range(11):
        pixel = binIx2pixel(ix, agent)
        print(f"{ix} {pixel}")
    print('-----------------------------')
    
def main(in_model, in_weights, prior_info, cond_scale):
    agent, mineclip, prior = init_simulator(in_model, in_weights, prior_info, cond_scale)

    #dumpBinIx2Pixels(agent);
    
    ctx = {
        'obs':{'pov':None}, 'agent':agent, 'mineclip':mineclip, 'prior':prior,
    }

    prompt_thread = init_prompt(ctx)
    frame_control_thread = init_frame_control(ctx)

    try:
        prompt_thread.join()
        frame_control_thread.join()
    except KeyboardInterrupt:
        pass

    # Clean up

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--in_model', type=str, default='data/weights/vpt/2x.model')
    parser.add_argument('--in_weights', type=str, default='data/weights/steve1/steve1.weights')
    parser.add_argument('--prior_weights', type=str, default='data/weights/steve1/steve1_prior.pt')
    parser.add_argument('--cond_scale', type=float, default=6.0)
    args = parser.parse_args()

    main(
        in_model=args.in_model,
        in_weights=args.in_weights,
        prior_info=PRIOR_INFO,
        cond_scale=args.cond_scale,
    )
